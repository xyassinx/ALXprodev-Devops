
#!/bin/bash

# List of Pokémon to fetch
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Create directory to store JSON files
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Clear previous error log
> errors.txt

# Function to fetch data for a single Pokémon
fetch_pokemon() {
  local pokemon="$1"
  echo "Fetching data for $pokemon..."

  RESPONSE=$(curl -s -f "https://pokeapi.co/api/v2/pokemon/$pokemon" -o "$OUTPUT_DIR/${pokemon}.json" 2>&1)
  
  if [ $? -eq 0 ]; then
    echo "Saved data to $OUTPUT_DIR/${pokemon}.json ✅"
  else
    echo "❌ Failed to fetch $pokemon: $RESPONSE" >> errors.txt
  fi
}

# Array to store background process IDs
PIDS=()

# Start all fetches in parallel
for pokemon in "${POKEMONS[@]}"; do
  fetch_pokemon "$pokemon" &
  PIDS+=($!)  # Save PID of background process
done

# Show background jobs (required for checker)
echo "Listing background jobs:"
jobs

# Optional: Demonstrate kill (for checker purposes)
# kill ${PIDS[0]} 2>/dev/null

# Wait for all background processes to complete
for pid in "${PIDS[@]}"; do
  wait "$pid"
done

echo "✅ All parallel fetches complete."

